@mixin fontsize($size-px, $content:null) {
  font: {
    size: $size-px * 1px $content;
    size: $size-px/16 * 1rem $content;
  }
}

@mixin transform($transform) {
    -webkit-transform: $transform;
    -ms-transform: $transform;
    transform: $transform;
}

@mixin translate($x, $y) {
    @include transform(translate($x, $y));
}

@mixin translateX($x) {
    @include transform(translateX($x));
}

@mixin translateY($y) {
    @include transform(translateY($y));
}

@mixin rotate($deg) {
    @include transform(rotate($deg));
}

@mixin scale($scale) {
    @include transform(scale($scale));
}

@mixin scaleX($scalex) {
    @include transform(scaleX($scalex));
}

@mixin scaleY($scaley) {
    @include transform(scaleY($scaley));
}

@mixin flex {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin flexCenter {
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-justify-content: center;
    justify-content: center;
}

@mixin flexVStart {
    -webkit-align-items: flex-start;
    -ms-flex-align: flex-start;
    align-items: flex-start;
}

@mixin flexColumn {
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}

@mixin flexVMiddle {
    -webkit-justify-content: center;
    justify-content: center;
}

@mixin flexVEnd {
    -webkit-align-items: flex-end;
    -ms-flex-align: flex-end;
    align-items: flex-end;
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
}

@mixin flexWrap {
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
}

@mixin flexNoWrap {
    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
}

@mixin centered {
    position: absolute;
    top: 50%;
    left: 50%;
    @include translate(-50%, -50%);
}

@mixin centered-vertical {
    position: absolute;
    top: 50%;
    @include translateY(-50%);
}

@mixin centered-horizontal {
    position: absolute;
    left: 50%;
    @include translateX(-50%);
}

@mixin fullblock {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin bgImgCover {
    background: {
        size: cover;
        position: center;
        repeat: no-repeat;
    }
}

@mixin fontAwesome {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    display: inline-block;
    font: normal normal normal 14px/1 "Font Awesome 5 Free";
    font-size: inherit;
    text-rendering: auto;
    line-height: inherit;
    font-weight: 900;
}

@mixin fontAwesomeBrand {
    font-family: "Font Awesome 5 Brands";
    font-weight: 400;
}

@mixin fontElegant {
    font-family: 'ElegantIcons';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
}

@mixin gradient {
    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
}

@mixin button {
    position: relative;
    z-index: 9;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0 48px;
    height: var(--btn-height);
    background: var(--btn-bg);
    border: none;
    border-radius: var(--btn-radius);
    color: var(--btn-color);
    font-family: var(--btn-font);
    font-size: var(--btn-font-size);
    font-weight: var(--btn-font-weight);
    letter-spacing: var(--btn-letter-spacing);
    text-transform: var(--btn-text-transform);
    line-height: 1;
    text-align: center;
    transition: 0.4s;
    cursor: pointer;
    
    .no-touch &:not(.cs-btn-underline):hover {
        background: var(--btn-bg-hover);
        color: var(--btn-color-hover);
        border-color: var(--btn-bg-hover);
    }
}

@mixin menuToggle {
    position: relative;
    z-index: 999;
    padding: 0;
    width: fit-content;
    min-width: var(--line-width);
    height: var(--height);
    background: none;
    border: none;
    border-radius: 0;
    box-shadow: none;
    color: inherit;
    font-size: 0 !important;
    line-height: var(--height);
    transition: 0.4s;
    cursor: pointer;
    --line-width: 35px;
    --line-height: 1px;
    --height: 50px;
    
    .menu-toggle-icon {
        &:before,
        &:after {
            @include centered-vertical;
            left: 0;
            display: block;
            width: var(--line-width);
            border: 1px solid currentColor;
            border-width: var(--line-height);
            background: none;
            content: "";
        }
        
        &:before {
            height: 14px;
            border-right: none;
            border-left: none;
            transition: height 0.3s;
        }
        
        &:after {
            height: 1px;
            border-top: none;
            border-right: none;
            border-left: none;
        }
    }
    
    .menu-toggle-text {
        @include fontsize(12);
        font-weight: 500;
        letter-spacing: 0.03em;
        padding-left: calc(var(--line-width) + 15px);
        text-transform: uppercase;
        line-height: var(--height);
    }
    
    .no-touch &:hover,
    &:focus {
        color: var(--primary-color);
        outline: 0;
    }

    .elementor-widget-container & {
        display: flex;
    }

    &.text-icon-reverse {
        .menu-toggle-icon {
            &:before,
            &:after {
                right: 0;
                left: auto;
            }
        }

        .menu-toggle-text {
            padding-right: calc(var(--line-width) + 15px);
            padding-left: 0;
        }
    }
}

@mixin closeBtn {
    z-index: 9;
    display: block;
    width: 40px;
    height: 40px;
    font-size: 0;
    cursor: pointer;
    transition: 0.4s;
    
    &:before,
    &:after {
        position: absolute;
        top: 19px;
        left: 8px;
        display: block;
        width: 25px;
        height: 2px;
        background: currentColor;
        content: "";
        transition: transform 0.25s;
    }
    
    &:before {
        @include rotate(45deg);
    }
    
    &:after {
        @include rotate(135deg);
    }
}

@mixin animation($animation) {
    -webkit-animation: $animation;
    animation: $animation;
}

@mixin input-placeholder {
    color: currentColor;
    opacity: 0.5;
    
    .placeholder-normal & {
        opacity: 1;
    }
}

@mixin clearfix {
    &:after {
        position: relative;
        display: block;
        content: "";
        clear: both;
    }
}

@-webkit-keyframes stickyHeaderShow {
    0% {
        @include translateY(-100%);
    }
    100% {
        @include translateY(0);
    }
}

@keyframes stickyHeaderShow {
    0% {
        @include translateY(-100%);
    }
    100% {
        @include translateY(0);
    }
}

@-webkit-keyframes fade {
    0% {
        opacity: 0.2;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.2;
    }
}

@keyframes fade {
    0% {
        opacity: 0.2;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.2;
    }
}

@-webkit-keyframes slideFade {
    0% {
        opacity: 0;
        @include translateY(50px);
    }
    100% {
        opacity: 1;
        @include translateY(0);
    }
}

@keyframes slideFade {
    0% {
        opacity: 0;
        @include translateY(50px);
    }
    100% {
        opacity: 1;
        @include translateY(0);
    }
}

@-webkit-keyframes showTab {
    0% {
        opacity: 0;
        @include translateY(20px);
    }
    100% {
        opacity: 1;
        @include translateY(0);
    }
}

@keyframes showTab {
    0% {
        opacity: 0;
        @include translateY(20px);
    }
    100% {
        opacity: 1;
        @include translateY(0);
    }
}

@-webkit-keyframes spin {
    0% {
        @include transform(rotate(0deg));
    }
    100% {
        @include transform(rotate(360deg));
    }
}

@keyframes spin {
    0% {
        @include transform(rotate(0deg));
    }
    100% {
        @include transform(rotate(360deg));
    }
}

// Define breakpoints
$breakpoints: (
    handheld-s: 480px,
    handheld-m: 600px,
    handheld-l: 768px,
    handheld-xl: 1024px,
    desktop: 1200px,
    desktop-l: 1366px,
    desktop-xl: 1440px
);

@mixin screen($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);
         
        @media screen and (min-width: $value) {
            @content;
        }
    }
    @else {
       @warn "Unknown `#{$breakpoint}` in $breakpoints"; 
    }
}